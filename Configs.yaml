# GateController Device Template

esphome:
  name: sonoff-gatecontroller
  friendly_name: GateControl

esp8266:
  board: esp01_1m

# Ensure WiFi SSID and Password is stored
# in the secrets file.
wifi:
  ssid: !secret wifi_ssid 
  password: !secret wifi_password
  power_save_mode: none

  # Enable fallback hotspot (captive portal) in case wifi connection fails.
  ap:
    ssid: "Sonoff-Gate"
    password: "password"
  # Optional
  # manual_ip:
  #   static_ip: [OWN IP ADDRESS HERE]
  #   gateway: [SET OWN GATEWAY IP HERE]
  #   subnet: [SET OWN SUBNET HERE]
  #   dns1: [REPLACE_WITH_YOUR_DNS]

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: [REPLACE_WITH_GENERATED_KEY]

# Initially, keep Captive Portal to ensure Wifi Config is correct.
captive_portal:

web_server:
  local: true
  auth:
    username: admin
    password: [ENTER_OWN_PASSWORD_FOR_WEBSERVER]

# Configure an OTA Password
ota:
  - platform: esphome
    password: [CHOOSE_OTA_PASSWORD]

# If using MQTT uncomment and update variables:
#mqtt:
#  broker: [MQTT_BROKER_IP_ADDRESS]
#  username: [MQTT_USERNAME]
#  password: [MQTT_PASSWORD]
#  discovery_unique_id_generator: mac
#  log_topic: gatec/logs
#  topic_prefix: gatec
#  birth_message:
#    topic: ${devicename}/topic
#    payload: online
#  will_message:
#    topic: ${devicename}/topic
#    payload: offline

output:
  - platform: gpio
    pin: GPIO12
    id: relay
  - platform: gpio
    pin: GPIO5
    id: relay_2

button:
  - platform: output
    output: relay
    id: button_1
    disabled_by_default: True
    duration: 1000ms
    name: "Open / Close"
    icon: mdi:gate
  - platform: output
    output: relay_2
    id: button_2
    duration: 1000ms
    name: "Pedestrian"
    icon: "mdi:walk"

binary_sensor:
  - platform: gpio
    pin: 
      number: GPIO14
      mode:
        input: True
    name: "Gate Open/Closed"
    id: gate_status
    entity_category: diagnostic
    disabled_by_default: True
    publish_initial_state: True
    device_class: door
    filters:
      - delayed_on_off: 150ms
    on_multi_click: 
      - timing: # Closed
          - OFF for at least 2000ms
        then:
          - logger.log: "Closed"
          - text_sensor.template.publish:
              id: status
              state: "Closed"
          - lambda: |-
              id(gate).current_operation = CoverOperation::COVER_OPERATION_IDLE;
              id(gate).publish_state();
        invalid_cooldown: 100ms

      - timing: # Open
          - ON for at least 2000ms
        then:
          - logger.log: "Open"
          - text_sensor.template.publish:
              id: status
              state: "Open"
          - lambda: |-
              id(gate).current_operation = CoverOperation::COVER_OPERATION_IDLE;
              id(gate).publish_state();
        invalid_cooldown: 100ms

      - timing: # Closing
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        then:
          - logger.log: "Closing"
          - text_sensor.template.publish:
              id: status
              state: "Closing"
          - lambda: |-
              id(gate).current_operation = CoverOperation::COVER_OPERATION_CLOSING;
              id(gate).publish_state();
        invalid_cooldown: 100ms

      - timing: # Opening
          - ON for 200ms to 400ms
          - OFF for 200ms to 400ms
          - ON for 200ms to 400ms
          - OFF for 200ms to 400ms
          - ON for 200ms to 400ms
          - OFF for 200ms to 400ms
          - ON for 200ms to 400ms
          - OFF for 200ms to 400ms
        then:
          - logger.log: "Opening"
          - text_sensor.template.publish:
              id: status
              state: "Opening"
          - lambda: |- 
              id(gate).current_operation = CoverOperation::COVER_OPERATION_OPENING;
              id(gate).publish_state();
        invalid_cooldown: 100ms

      - timing: # No Mains Power
          - ON for 200ms to 300ms
          - OFF for 200ms to 300ms
          - ON for 200ms to 300ms
          - OFF for 1200ms to 1400ms
        then:
          - logger.log: "No Mains"
          - text_sensor.template.publish:
              id: status
              state: "No Mains"
        invalid_cooldown: 100ms

      - timing: # Battery Low
          - ON for 200ms to 300ms
          - OFF for 200ms to 300ms
          - ON for 200ms to 300ms
          - OFF for 200ms to 300ms
          - ON for 200ms to 300ms
          - OFF for 500ms to 1000ms
        then:
          - logger.log: "Low Battery"
          - text_sensor.template.publish:
              id: status
              state: "Low Battery"
        invalid_cooldown: 100ms

cover:
  - platform: template
    name: "Gate"
    device_class: gate
    id: gate
    lambda: |-
      if (id(status).state == "Open") {
        return COVER_OPEN;
      } else if (id(status).state == "Closed") {
        return COVER_CLOSED;
      } else {
        return {};
      }
    open_action: 
      - button.press: button_1
    close_action: 
      - button.press: button_1
    stop_action: 
      - button.press: button_1
    optimistic: False
    
sensor:
  - platform: wifi_signal
    name: "Wifi Signal"
    update_interval: 600s
  - platform: adc
    pin: VCC
    name: "VCC"
    update_interval: 600s
  # Uptime sensor
  - platform: uptime
    name: Uptime


text_sensor:
  - platform: template
    icon: mdi:infomation-outline
    id: status
    name: "Status"
  - platform: version
    name: "Version"
  # Expose Wifi information as a sensor
  - platform: wifi_info
    ip_address:
      name: IP
    ssid:
      name: SSID
    bssid:
      name: BSSID

# Optional
time:
  - platform: homeassistant
    id: homeassistant_time
